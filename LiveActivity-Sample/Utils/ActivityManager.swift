//
//  ActivityManager.swift
//  LiveActivity-Sample
//
//  Created by KavinduDissanayake on 2025-03-09.
//


import ActivityKit
import FirebaseFirestore

class ActivityManager {
    static let shared = ActivityManager()
    private var activity: Activity<RideTrackingAttributes>?
    private let database = Firestore.firestore()

    private init() {}
    
    func requestPushPermissions() async {
        do {
            let _ = try await UNUserNotificationCenter.current()
                .requestAuthorization(options: [.alert, .badge, .sound])
            print("‚úÖ Push Notification Authorization Granted")
        } catch {
            print("‚ùå Error requesting authorization: \(error.localizedDescription)")
        }
    }
    

   
    // MARK: - Start Live Activity
    func startActivity(ride: RideTracking) {
        let attributes = RideTrackingAttributes(id: ride.id)
        let initialState = RideTrackingAttributes.ContentState(
            progressPercentage: ride.progressPercentage,
            estimatedArrival: ride.estimatedArrival,
            driverName: ride.driverName,
            travelStatus: ride.travelStatus,
            carPlate: ride.carPlate,
            carModel: ride.carModel
        )

        let content = ActivityContent(state: initialState, staleDate: nil)

        do {
            var newActivity = try Activity.request(
                attributes: attributes,
                content: content,
                pushType: .token
            )
            print("‚úÖ Live Activity started for Ride ID: \(ride.id)")

            database.collection("rides").document(ride.id).setData([
                   "activityId": newActivity.id,  // Auto-generated by ActivityKit
                   "rideId": ride.id  // Our own ride ID for mapping
               ], merge: true)

        } catch {
            print("‚ùå Error starting Live Activity: \(error.localizedDescription)")
        }
    }

    // MARK: - Update Live Activity
    func updateActivity(ride: RideTracking) {
        Task { @MainActor in
            let newState = RideTrackingAttributes.ContentState(
                progressPercentage: ride.progressPercentage,
                estimatedArrival: ride.estimatedArrival,
                driverName: ride.driverName,
                travelStatus: ride.travelStatus,
                carPlate: ride.carPlate,
                carModel: ride.carModel
            )
            let content = ActivityContent(state: newState, staleDate: nil)

            if let activity = findActivity(rideId: ride.id) {
                await activity.update(content)
                print("üîÑ Live Activity updated: \(ride.progressPercentage)%")
            } else {
                print("‚ö†Ô∏è No active Live Activity found for Ride ID: \(ride.id)")
            }
        }
    }

    // MARK: - Finish Live Activity
    func finishActivity(ride: RideTracking) {
        Task {
            if let activity = findActivity(rideId: ride.id) {
                let finalContent = RideTrackingAttributes.ContentState(
                    progressPercentage: ride.progressPercentage,
                    estimatedArrival: ride.estimatedArrival,
                    driverName: ride.driverName,
                    travelStatus: ride.travelStatus,
                    carPlate: ride.carPlate,
                    carModel: ride.carModel
                )
                await activity.end(ActivityContent(state: finalContent, staleDate: nil))
                print("üèÅ Live Activity finished for Ride ID: \(ride.id)")

                // Remove activity ID from Firestore after completion
                do {
                    try await database.collection("rides").document(ride.id).updateData([
                        "activityId": FieldValue.delete()
                    ])
                    print("‚úÖ Firestore activity ID removed for Ride ID: \(ride.id)")
                } catch {
                    print("‚ùå Error removing activity ID from Firestore: \(error.localizedDescription)")
                }
            } else {
                print("‚ö†Ô∏è No active Live Activity found to finish for Ride ID: \(ride.id)")
            }
        }
    }

    // MARK: - Find Activity by Ride ID
    private func findActivity(rideId: String) -> Activity<RideTrackingAttributes>? {
        return Activity<RideTrackingAttributes>.activities.first { $0.attributes.id == rideId }
    }

    // MARK: - Listen for Push Tokens and Update Firestore
    func listenForTokenToStartActivityViaPush() {
        Task {
            for await pushToken in Activity<RideTrackingAttributes>.pushToStartTokenUpdates {
                let pushTokenString = pushToken.reduce("") { $0 + String(format: "%02x", $1) }
                print("=== [START] RideTrackingAttributes: \(pushTokenString)")
                AppData.liveActivityToken = pushTokenString
                
              //  listenForTokenToUpdateActivityViaPush()
            }
        }
    }
    

    
    func listenForTokenToUpdateActivityViaPush() {
        Task {
            print("üîç Observing push token updates for Live Activities...")

            // Listen for any updates from a Live Activity with RideTrackingAttributes
            for await activityData in Activity<RideTrackingAttributes>.activityUpdates {
                print("üîÑ Detected activity update for Ride ID: \(activityData.attributes.id)")

                // Listen for updates to the push token associated with the Live Activity
                Task {
                    // Iterate through the push token updates
                    for await tokenData in activityData.pushTokenUpdates {
                        // Convert the token data to a hexadecimal string
                        let token = tokenData.map { String(format: "%02x", $0) }.joined()
                        
                        // Obtain the associated ride ID from the activity attributes
                        let rideId = activityData.attributes.id
                        print("üì° New push token received for Ride ID: \(rideId) -> Token: \(token)")

                        // Update Firestore with the new token
                        updatePushTokenInFirestore(pushToken: token, rideId: rideId)
                    }
                }
            }
        }
    }

    // MARK: - Update Firestore with Push Token
    private func updatePushTokenInFirestore(pushToken: String, rideId: String? = nil) {
        guard let rideId = rideId else { return }
        database.collection("rides").document(rideId).setData([
            "liveActivityToken": pushToken,
            "updateActivityToken": pushToken
        ], merge: true) { error in
            if let error = error {
                print("‚ùå Error updating push token: \(error.localizedDescription)")
            } else {
                print("‚úÖ Push token updated successfully in Firestore for Ride ID: \(rideId)")
            }
        }
    }
}
